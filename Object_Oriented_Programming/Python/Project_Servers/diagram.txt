@startuml


class Product{
  + __init__(self, name: str, price: float)
  + __eq__(self, other)
  + __hash__(self)
  + name : str
  + price : float
}

abstract class Server{
  + {abstract} get_list(self, n_letters: Optional[int]) : List[Product]
  + {static} check_name(name: str, n_letters: Optional[int]) : bool
  + get_entries(self, n_letters: Optional[int]) : List[Product]
  + {static} n_max_returned_entries : int
}

class MapServer {
  + __init__(self, products: List[Product])
  + get_list(self, n_letters) : List[Product]
  + products : Dict[str, Product]
}

class ListServer{
  + products : List[Product]
  + __init__(self, products_: List[Product])
  + get_list(self, n_letters: Optional[int]) : List[Product]

}
class TooManyProductsError{
  + __init__(self, msg=None, *args, **kwargs)
  + msg : str
}

class ServerError{
  + __init__(self, *args, **kwargs)
}

class Client{
  + __init__(self, server_: Server)
  + get_total_price(self, n_letters: Optional[int]) : Optional[float]
  + server: Server
}


MapServer *-- Product
ListServer *-- Product
Server ..> TooManyProductsError : << throws >>
Exception <|-- ServerError
ServerError <|-- TooManyProductsError
Client o-- Server
Server <|-- MapServer
Server <|-- ListServer

@enduml
